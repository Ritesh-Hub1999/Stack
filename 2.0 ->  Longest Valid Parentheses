https://leetcode.com/problems/longest-valid-parentheses/description/
Example 1:
---------
Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".

Example 2:
----------
Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".

Example 3:
----------
Input: s = ""
Output: 0

Approch:
-------
-> open bracket mila us index ko push kr do stack mai.
-> jaisa closing bracket mila usa pop kro and length
   find kro.
-> agr closing bracket aai starting mai usa push kr do 
    stack mai
    
//step 1: stack mai push kr do starting mai -1

//STEP 2: jaisa hii open bracket aai uska index push kr do stack mai

//step 3: jaisa hi closing bracket mila index ko pop kr do
          ya length nikalo and max find kro

// step4: Agr stack empty hua tho starting ki index push kr do

Code:
-----
int longestValidParentheses(string s) {
        stack<int> st;
        int ans = 0;
        //step 1: stack mai push kr do starting mai -1
        st.push(-1);
        for(int i=0;i<s.length();i++){
        
        //STEP 2: jaisa hii open bracket aai uska index push kr do stack mai
            if(s[i] == '('){
                st.push(i);
            }
        //step 3: jaisa hi closing bracket mila index ko pop kr do
        //ya length nikalo and max find kro
            else{
                st.pop();
                // step4: Agr stack empty hua tho starting ki index push kr do
                if(st.empty()){
                    st.push(i);
                }
                else{
                    int len = i - st.top();
                    ans = max(ans,len);
                }
            }
        }
        return ans;
    }

Approch2:
--------
intiution: Valid parenthesis ka lia open and close bracket equal hona cahiya.

 //step 1: pehla left sa right check karenga
 
 //step 2: dusri baar right sa left jainga 

 Code:
 ----
  int longestValidParentheses(string s) {
        int ans = 0;
        int open = 0;
        int close = 0;
    // number of opening bracket == number of closing bracket

    //step 1: pehla left sa right check karenga
        for(int i=0;i<s.length();i++){
            if(s[i] == '('){
                open++;
            }
            else{
                close++;
            }
            
            if(open == close){
                int len = open+close;
                ans = max(ans,len);
            }
            else if(close > open){
                open = 0;
                close = 0;
            }
        }
            open = 0;
            close = 0;

    //step 2: dusri baar right sa left jainga 
        for(int i=s.length()-1;i >= 0;i--){
            if(s[i] == '('){
                open++;
            }
            else{
                close++;
            } if(open == close){
                int len = open+close;
                ans = max(ans,len);
            }
            else if(close < open){
                open = 0;
                close = 0;
            }

        }
        return ans;
    }
